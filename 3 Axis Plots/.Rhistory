tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
filter(date <= "2018-05-01")
library(pdftools)
install.packages("pdftools")
library(pdftools)
span <- 60 / as.numeric(diff(range(dat$date)))
fit <- dat %>% mutate(x = as.numeric(date)) %>% loess(deaths ~ x, data = ., span = span, degree = 1)
dat %>% mutate(smooth = predict(fit, as.numeric(date))) %>%
ggplot() +
geom_point(aes(date, deaths)) +
geom_line(aes(date, smooth), lwd = 2, col = 2)
library(pdftools)
fn <- system.file("extdata", "RD-Mortality-Report_2015-18-180531.pdf", package="dslabs")
dat <- map_df(str_split(pdf_text(fn), "\n"), function(s){
s <- str_trim(s)
header_index <- str_which(s, "2015")[1]
tmp <- str_split(s[header_index], "\\s+", simplify = TRUE)
month <- tmp[1]
header <- tmp[-1]
tail_index  <- str_which(s, "Total")
n <- str_count(s, "\\d+")
out <- c(1:header_index, which(n==1), which(n>=28), tail_index:length(s))
s[-out] %>%
str_remove_all("[^\\d\\s]") %>%
str_trim() %>%
str_split_fixed("\\s+", n = 6) %>%
.[,1:5] %>%
as_data_frame() %>%
setNames(c("day", header)) %>%
mutate(month = month,
day = as.numeric(day)) %>%
gather(year, deaths, -c(day, month)) %>%
mutate(deaths = as.numeric(deaths))
}) %>%
mutate(month = recode(month, "JAN" = 1, "FEB" = 2, "MAR" = 3, "APR" = 4, "MAY" = 5, "JUN" = 6,
"JUL" = 7, "AGO" = 8, "SEP" = 9, "OCT" = 10, "NOV" = 11, "DEC" = 12)) %>%
mutate(date = make_date(year, month, day)) %>%
filter(date <= "2018-05-01")
library(pdftools)
mnist <- read_mnist()
y <- rowMeans(mnist$train$images>50 & mnist$train$images<205)
qplot(as.factor(mnist$train$labels), y, geom = "boxplot")
mean(y)
library(broom)
library(dslabs)
data(mnist_27)
mnist_27$train %>% glm(y ~ x_2, family = "binomial", data = .) %>% tidy()
mnist <- read_mnist()
y <- rowMeans(mnist$train$images>50 & mnist$train$images<205)
qplot(as.factor(mnist$train$labels), y, geom = "boxplot")
mean(y)
mnist <- read_mnist()
y <- rowMeans(mnist$train$images>50 & mnist$train$images<205)
qplot(as.factor(mnist$train$labels), y, geom = "boxplot")
mean(y)
library(dslabs)
data("tissue_gene_expression")
set.seed(1)
data("heights")
library(caret)
library(dplyr)
ks <- seq(1, 101, 3)
F_1 <- sapply(ks, function(k){
test_index <- createDataPartition(heights$sex, times = 1, p = 0.5, list = FALSE)
test_set <- heights[test_index, ]
train_set <- heights[-test_index, ]
fit <- knn3(sex ~ height, data = train_set, k = k)
y_hat <- predict(fit, test_set, type = "class") %>%
factor(levels = levels(train_set$sex))
F_meas(data = y_hat, reference = test_set$sex)
})
plot(ks, F_1)
max(F_1)
# Q2
set.seed(1)
library(caret)
y <- tissue_gene_expression$y
x <- tissue_gene_expression$x
train_index <- createDataPartition(y, list = FALSE)
sapply(seq(1, 11, 2), function(k){
fit <- knn3(x[train_index,], y[train_index], k = k)
y_hat <- predict(fit, newdata = data.frame(x=x[-train_index,]),
type = "class")
mean(y_hat == y[-train_index])
})
library(dbplyr)
library(dslabs)
library(tidyverse)
library(caret)
set.seed(1996)
n <- 1000
p <- 10000
x <- matrix(rnorm(n*p), n, p)
colnames(x) <- paste("x", 1:ncol(x), sep = "_")
y <- rbinom(n, 1, 0.5) %>% factor()
x_subset <- x[ ,sample(p, 100)]
library(tidyr)
set.seed(1995)
indexes <- createResample(mnist_27$train$y, 10)
library(rpart)
library(dplyr)
library(ggplot2)
n <- 1000
sigma <- 0.25
x <- rnorm(n, 0, 1)
y <- 0.75 * x + rnorm(n, 0, sigma)
dat <- data.frame(x = x, y = y)
library(rpart)
library(dplyr)
library(ggplot2)
n <- 1000
sigma <- 0.25
x <- rnorm(n, 0, 1)
y <- 0.75 * x + rnorm(n, 0, sigma)
dat <- data.frame(x = x, y = y)
fit <- rpart(y ~ ., data = dat)
plot(fit)
text(fit)
library(randomForest)
install.packages('randomForest')
library(randomForest)
fit <- randomForest(y ~ x, data = dat)
dat %>%
mutate(y_hat = predict(fit)) %>%
ggplot() +
geom_point(aes(x, y)) +
geom_step(aes(x, y_hat), col = 2)
plot(fit)
library(titanic)    # loads titanic_train data frame
library(caret)
library(tidyverse)
library(tidyr)
library(rpart)
# 3 significant digits
options(digits = 3)
# clean the data - `titanic_train` is loaded with the titanic package
titanic_clean <- titanic_train %>%
mutate(Survived = factor(Survived),
Embarked = factor(Embarked),
Age = ifelse(is.na(Age), median(Age, na.rm = TRUE), Age), # NA age to median age
FamilySize = SibSp + Parch + 1) %>%    # count family members
select(Survived,  Sex, Pclass, Age, Fare, SibSp, Parch, FamilySize, Embarked)
# Q1
set.seed(42, sample.kind = 'Rounding') # if R version >= 3.6
# Q1
set.seed(42) # if R version >= 3.6
test_index <- createDataPartition(titanic_clean$Survived, times = 1, p = 0.2, list = FALSE)
train_set <- titanic_clean[-test_index,]
test_set <- titanic_clean[test_index,]
nrow(train_set)
nrow(test_set)
mean(train_set$Survived == 1)
# Q2
set.seed(3) # if R version >= 3.6
guess_ <- sample(c(0,1), nrow(test_set), replace = TRUE)
test_set %>%
filter(Survived == guess_) %>%
summarize(n() / nrow(test_set))
# guess with equal probability of survival
guess <- sample(c(0,1), nrow(test_set), replace = TRUE)
mean(guess == test_set$Survived)
# Q3
train_set %>%
group_by(Sex) %>%
summarize(Survived = mean(Survived == 1))
# Q3-b
test_set %>%
summarize( (sum(Sex == 'female' & Survived == 1) + sum(Sex == 'male' & Survived == 0)) / n())
# Q4-a
survival_class <- titanic_clean %>%
group_by(Pclass) %>%
summarize(PredictingSurvival = ifelse(mean(Survived == 1) >=0.5, 1, 0))
survival_class
# Q4-b
test_set %>%
inner_join(survival_class, by='Pclass') %>%
summarize(PredictingSurvival = mean(Survived == PredictingSurvival))
# Q4-c
survival_class <- titanic_clean %>%
group_by(Sex, Pclass) %>%
summarize(PredictingSurvival = ifelse(mean(Survived == 1) > 0.5, 1, 0))
survival_class
# Q4-d
test_set %>%
inner_join(survival_class, by=c('Sex', 'Pclass')) %>%
summarize(PredictingSurvival = mean(Survived == PredictingSurvival))
# Confusion Matrix: sex and class model
sex_class_model <- train_set %>%
group_by(Sex, Pclass) %>%
summarize(Survived_predict = ifelse(mean(Survived == 1) > 0.5, 1, 0))
test_set3 <- test_set %>%
inner_join(sex_class_model, by=c('Sex', 'Pclass'))
cm3 <- confusionMatrix(data = factor(test_set3$Survived_predict), reference = factor(test_set3$Survived))
cm3 %>%
tidy() %>%
filter(term == 'sensitivity') %>%
.$estimate
cm3 %>%
tidy() %>%
filter(term == 'specificity') %>%
.$estimate
cm3 %>%
tidy() %>%
filter(term == 'balanced_accuracy') %>%
.$estimate
# Q5-a
# Confusion Matrix: sex model
sex_model <- train_set %>%
group_by(Sex) %>%
summarize(Survived_predict = ifelse(mean(Survived == 1) > 0.5, 1, 0))
test_set1 <- test_set %>%
inner_join(sex_model, by = 'Sex')
cm1 <- confusionMatrix(data = factor(test_set1$Survived_predict), reference = factor(test_set1$Survived))
cm1 %>%
tidy() %>%
filter(term == 'sensitivity') %>%
.$estimate
# Confusion Matrix: class model
class_model <- train_set %>%
group_by(Pclass) %>%
summarize(Survived_predict = ifelse(mean(Survived == 1) > 0.5, 1, 0))
test_set2 <- test_set %>%
inner_join(class_model, by = 'Pclass')
cm2 <- confusionMatrix(data = factor(test_set2$Survived_predict), reference = factor(test_set2$Survived))
cm2 %>%
tidy() %>%
filter(term == 'sensitivity') %>%
.$estimate
# Confusion Matrix: sex and class model
sex_class_model <- train_set %>%
group_by(Sex, Pclass) %>%
summarize(Survived_predict = ifelse(mean(Survived == 1) > 0.5, 1, 0))
test_set3 <- test_set %>%
inner_join(sex_class_model, by=c('Sex', 'Pclass'))
cm3 <- confusionMatrix(data = factor(test_set3$Survived_predict), reference = factor(test_set3$Survived))
cm3 %>%
tidy() %>%
filter(term == 'sensitivity') %>%
.$estimate
cm1 %>%
tidy() %>%
filter(term == 'specificity') %>%
.$estimate
cm2 %>%
tidy() %>%
filter(term == 'specificity') %>%
.$estimate
cm3 %>%
tidy() %>%
filter(term == 'specificity') %>%
.$estimate
cm3 %>%
tidy() %>%
filter(term == 'balanced_accuracy') %>%
.$estimate
cm2 %>%
tidy() %>%
filter(term == 'balanced_accuracy') %>%
.$estimate
cm1 %>%
tidy() %>%
filter(term == 'balanced_accuracy') %>%
.$estimate
# Q6
F_meas(data=factor(test_set1$Survived), reference = factor(test_set1$Survived_predict))
F_meas(data=factor(test_set2$Survived), reference = factor(test_set2$Survived_predict))
F_meas(data=factor(test_set3$Survived), reference = factor(test_set3$Survived_predict))
# Q7
fit_lda <- train(Survived ~ Fare, data = train_set, method = 'lda')
Survived_hat <- predict(fit_lda, test_set)
mean(test_set$Survived == Survived_hat)
fit_qda <- train(Survived ~ Fare, data = train_set, method = 'qda')
Survived_hat <- predict(fit_qda, test_set)
mean(test_set$Survived == Survived_hat)
# Q8
fit_logreg_a <- glm(Survived ~ Age, data = train_set, family = 'binomial')
survived_hat_a <- ifelse(predict(fit_logreg_a, test_set) >= 0, 1, 0)
mean(survived_hat_a == test_set$Survived)
fit_logreg_b <- glm(Survived ~ Sex + Pclass + Fare + Age, data = train_set, family = 'binomial')
survived_hat_b <- ifelse(predict(fit_logreg_b, test_set) >= 0, 1, 0)
mean(survived_hat_b == test_set$Survived)
str(train_set)
fit_logreg_c <- glm(Survived ~ ., data = train_set, family = 'binomial')
survived_hat_c <- ifelse(predict(fit_logreg_c, test_set) >= 0, 1, 0)
mean(survived_hat_c == test_set$Survived)
# Q9-a
set.seed(6, sample.kind = "Rounding")
# Method below doesn't give same result as EdX (though it is correct)
# ks <- seq(3,51,2)
# res_knn9a <- sapply(ks, function(k) {
#     fit_knn9a <- knn3(Survived ~ ., data = train_set, k = k)
#     survived_hat <- predict(fit_knn9a, train_set, type = "class") %>% factor(levels = levels(train_set$Survived))
#     cm_test <- confusionMatrix(data = survived_hat, reference = train_set$Survived)
#     cm_test$overall["Accuracy"]
# })
# ks[which.max(res_knn9a)]
# Other method using train function
k <- seq(3,51,2)
fit_knn9a <- train(Survived ~ ., data = train_set, method = "knn", tuneGrid = data.frame(k))
fit_knn9a$bestTune
# Q9-b
ggplot(fit_knn9a)
# Q9-c
survived_hat <- predict(fit_knn9a, test_set) %>% factor(levels = levels(test_set$Survived))
cm_test <- confusionMatrix(data = survived_hat, reference = test_set$Survived)
cm_test$overall["Accuracy"]
# Q10
set.seed(8, sample.kind = "Rounding")
fit_knn10 <- train(Survived ~ .,
data=train_set,
method = "knn",
tuneGrid = data.frame(k = seq(3, 51, 2)),
trControl = trainControl(method = "cv", number=10, p=0.9))
fit_knn10
survived_hat <- predict(fit_knn10, test_set)
cm_test <- confusionMatrix(data = survived_hat, reference = test_set$Survived)
cm_test$overall["Accuracy"]
# Q11-a
set.seed(10, sample.kind = 'Rounding')
fit_rpart11 <- train(Survived ~ .,
data=train_set,
method = "rpart",
tuneGrid = data.frame(cp = seq(0, 0.05, 0.002)))
plot(fit_rpart11)
survived_hat <- predict(fit_rpart11, test_set)
cm_test <- confusionMatrix(data = survived_hat, reference = test_set$Survived)
cm_test$overall["Accuracy"]
# Q11-b
fit_rpart11$finalModel
plot(fit_rpart11$finalModel, margin=0.1)
text(fit_rpart11$finalModel, cex = 0.75)
# Q12
set.seed(14, sample.kind = 'Rounding')
fit12_rf <- train(Survived ~.,
data = train_set,
method = "rf",
tuneGrid = data.frame(mtry = seq(1, 7)),
ntree = 100)
fit12_rf$bestTune
survived_hat <- predict(fit12_rf, test_set)
mean(survived_hat == test_set$Survived)
varImp(fit12_rf)
library(caret)
library(dslabs)
set.seed(1) # use `set.seed(1, sample.kind = "Rounding")` in R 3.6 or later
data("mnist_27")
fits <- lapply(models, function(model){
print(model)
train(y ~ ., method = model, data = mnist_27$train)
})
names(fits) <- models
models <- c("glm", "lda",  "naive_bayes",  "svmLinear",
"gamboost",  "gamLoess", "qda",
"knn", "kknn", "loclda", "gam",
"rf", "ranger",  "wsrf", "Rborist",
"avNNet", "mlp", "monmlp",
"adaboost", "gbm",
"svmRadial", "svmRadialCost", "svmRadialSigma")
library(caret)
library(dslabs)
set.seed(1) # use `set.seed(1, sample.kind = "Rounding")` in R 3.6 or later
data("mnist_27")
fits <- lapply(models, function(model){
print(model)
train(y ~ ., method = model, data = mnist_27$train)
})
# Q3
acc <- colMeans(pred == mnist_27$test$y)
# Q2
pred <- sapply(fits, function(object)
predict(object, newdata = mnist_27$test))
fits <- lapply(models, function(model){
print(model)
train(y ~ ., method = model, data = mnist_27$train)
})
fits <- lapply(models, function(model){
print(model)
train(y ~ ., method = model, data = mnist_27$train)
})
fits <- lapply(models, function(model){
print(model)
train(y ~ ., method = model, data = mnist_27$train)
})
models <- c("glm", "lda",  "naive_bayes",  "svmLinear",
"gamboost",  "gamLoess", "qda",
"knn", "kknn", "loclda", "gam",
"rf", "ranger",  "wsrf", "Rborist",
"avNNet", "mlp", "monmlp",
"adaboost", "gbm",
"svmRadial", "svmRadialCost", "svmRadialSigma")
library(caret)
library(dslabs)
set.seed(1) # use `set.seed(1, sample.kind = "Rounding")` in R 3.6 or later
data("mnist_27")
fits <- lapply(models, function(model){
print(model)
train(y ~ ., method = model, data = mnist_27$train)
})
names(fits) <- models
install.packages('mboost')
models <- c("glm", "lda",  "naive_bayes",  "svmLinear",
"gamboost",  "gamLoess", "qda",
"knn", "kknn", "loclda", "gam",
"rf", "ranger",  "wsrf", "Rborist",
"avNNet", "mlp", "monmlp",
"adaboost", "gbm",
"svmRadial", "svmRadialCost", "svmRadialSigma")
library(caret)
library(dslabs)
set.seed(1) # use `set.seed(1, sample.kind = "Rounding")` in R 3.6 or later
data("mnist_27")
fits <- lapply(models, function(model){
print(model)
train(y ~ ., method = model, data = mnist_27$train)
})
ind <- acc > mean(y_hat == mnist_27$test$y)
sum(ind)
models[ind]
ind <- acc > mean(y_hat == mnist_27$test$y)
# Q3
acc <- colMeans(pred == mnist_27$test$y)
library(dplyr)
data("tissue_gene_expression")
dim(tissue_gene_expression$x)
library(tidyverse)
library(lubridate)
library(dslabs)
data("movielens")
library(tidyr)
library(lubridate)
library(dslabs)
data("movielens")
brary (dplyr)
library (tidyr)
library (ggplot2)
library (readxl)
library (ggthemes)
# File for Hours and Temp Graph
setwd("~/Dropbox/Projects/Projects_R/Visualization_Project")
raw_data <- read_excel("file.xlsx")
#raw_data <- raw_data %>%
#  replace(., is.na(.), 0)
# Order of the Graph
#Turn your 'treatment' column into a character vector
raw_data$Virus <- as.character(raw_data$Virus)
#Then turn it back into a factor with the levels in the correct order
raw_data$Virus <- factor(raw_data$Virus, levels=unique(raw_data$Virus))
# Axis Tricks
#Labels = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v')
ylim.hours <- c(0, 3)
ylim.temp <- c(0, 22)
b <- diff(ylim.hours)/diff(ylim.temp)
a <- b*(ylim.hours[1] - ylim.temp[1])
# Color Pallete
cbbPalette <- c("#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#000000", "#CCCCCC", "#CCCCCC")
# Plot_1
ggplot() +
ggtitle('Title of the Chart') +
geom_bar(data=raw_data, aes(fill=Specie_Name, y=Hours, x=Virus), color = "black", position='dodge', stat="identity", width = 0.5) +
scale_fill_manual(values=cbbPalette) +
geom_point(data=raw_data, aes(fill=Specie_Name, y=a + Temp*b, x=Virus), position=position_dodge(width=0.5), stat="identity", size = 2, color = "red") +
#scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "Virus") +
scale_y_continuous("Hours", limits = c(0, 3), sec.axis = sec_axis(~ (. - a)/b, name = "Temperature", breaks = seq(0, 35, 5))) +
#scale_y_continuous("Hours", sec.axis = sec_axis(~ (. - 0), name = "Temperature", breaks = seq(0, 25, 5))) +
theme_classic() +
theme(
axis.title.y = element_text(color = "blue"),
axis.title.y.right = element_text(color = "red"),
legend.title = element_blank(),
legend.position = 'none')
# Axis Trick
ylim.logg <- c(0, 10)
ylim.salinity <- c(0, 40)
d <- diff(ylim.logg)/diff(ylim.salinity)
c <- b*(ylim.logg[1] - ylim.salinity[1])
# Plot_2
ggplot() +
ggtitle('Title of the Chart') +
geom_bar(data=raw_data, aes(fill=Specie_Name, y=`Log10 IVL`, x=Virus), color = "black", position='dodge', stat="identity", width = 0.5) +
scale_fill_manual(values=cbbPalette) +
geom_point(data=raw_data, aes(fill=Specie_Name, y=c + Salinity*d, x=Virus), position=position_dodge(width=0.5), stat="identity", size = 2, color = "blue") +
#scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "Virus") +
scale_y_continuous("Log10 IVL", limits = c(0, 12), breaks = seq(0, 12, 3), sec.axis = sec_axis(~ (. - b)*4, name = "Salinity")) +
#scale_y_continuous("Hours", sec.axis = sec_axis(~ (. - 0), name = "Temperature", breaks = seq(0, 25, 5))) +
theme_classic() +
theme(
axis.title.y = element_text(color = "black"),
axis.title.y.right = element_text(color = "blue"),
legend.title = element_blank(),
legend.position = 'none')
